yarn run v1.22.22
$ D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\.bin\hardhat test




  BitMath
    #mostSignificantBit
      ✔ 0
      ✔ 1
      ✔ 2
      ✔ all powers of 2 (387ms)
      ✔ uint256(-1)
      ✔ gas cost of smaller number
      ✔ gas cost of max uint128
      ✔ gas cost of max uint256
    #leastSignificantBit
      ✔ 0
      ✔ 1
      ✔ 2
      ✔ all powers of 2 (324ms)
      ✔ uint256(-1)
      ✔ gas cost of smaller number
      ✔ gas cost of max uint128
      ✔ gas cost of max uint256

  FullMath
    - check a bunch of random inputs against JS implementation
    #mulDiv
      ✔ reverts if denominator is 0
      ✔ reverts if denominator is 0 and numerator overflows
      ✔ reverts if output overflows uint256
      ✔ reverts if output overflows uint256
      ✔ reverts on overflow with all max inputs
      ✔ all max inputs
      ✔ accurate without phantom overflow
      ✔ accurate with phantom overflow
      ✔ accurate with phantom overflow and repeating decimal
    #mulDivRoundingUp
      ✔ reverts if denominator is 0
      ✔ reverts if denominator is 0 and numerator overflows
      ✔ reverts if output overflows uint256
      ✔ reverts on overflow with all max inputs
      ✔ reverts if mulDiv overflows 256 bits after rounding up
      ✔ reverts if mulDiv overflows 256 bits after rounding up case 2
      ✔ all max inputs
      ✔ accurate without phantom overflow
      ✔ accurate with phantom overflow
      ✔ accurate with phantom overflow and repeating decimal

  LiquidityMath
    #addDelta
      ✔ 1 + 0
      ✔ 1 + -1
      ✔ 1 + 1
      ✔ 2**128-15 + 15 overflows
      ✔ 0 + -1 underflows
      ✔ 3 + -4 underflows
      ✔ gas add
      ✔ gas sub

  Oracle
    #initialize
      ✔ index is 0
      ✔ cardinality is 1
      ✔ cardinality next is 1
      ✔ sets first slot timestamp only
      ✔ gas
    #grow
      ✔ increases the cardinality next for the first call
      ✔ does not touch the first slot
      ✔ is no op if oracle is already gte that size
      ✔ adds data to all the slots
      ✔ grow after wrap
      ✔ gas for growing by 1 slot when index == cardinality - 1
      ✔ gas for growing by 10 slots when index == cardinality - 1
      ✔ gas for growing by 1 slot when index != cardinality - 1
      ✔ gas for growing by 10 slots when index != cardinality - 1
    #write
      ✔ single element array gets overwritten
      ✔ does nothing if time has not changed
      ✔ writes an index if time has changed
      ✔ grows cardinality when writing past (38ms)
      ✔ wraps around
      ✔ accumulates liquidity
    #observe
      before initialization
        ✔ fails before initialize
        ✔ fails if an older observation does not exist
        ✔ does not fail across overflow boundary
        ✔ interpolates correctly at max liquidity
        ✔ interpolates correctly at min liquidity
        ✔ interpolates the same as 0 liquidity for 1 liquidity
        ✔ interpolates correctly across uint32 seconds boundaries
        ✔ single observation at current time
        ✔ single observation in past but not earlier than secondsAgo
        ✔ single observation in past at exactly seconds ago
        ✔ single observation in past counterfactual in past
        ✔ single observation in past counterfactual now
        ✔ two observations in chronological order 0 seconds ago exact
        ✔ two observations in chronological order 0 seconds ago counterfactual
        ✔ two observations in chronological order seconds ago is exactly on first observation
        ✔ two observations in chronological order seconds ago is between first and second
        ✔ two observations in reverse order 0 seconds ago exact
        ✔ two observations in reverse order 0 seconds ago counterfactual
        ✔ two observations in reverse order seconds ago is exactly on first observation
        ✔ two observations in reverse order seconds ago is between first and second
        ✔ can fetch multiple observations
        ✔ gas for observe since most recent
        ✔ gas for single observation at current time
        ✔ gas for single observation at current time counterfactually computed
      initialized with 5 observations with starting time of 5
        ✔ index, cardinality, cardinality next
        ✔ latest observation same time as latest
        ✔ latest observation 5 seconds after latest
        ✔ current observation 5 seconds after latest
        ✔ between latest observation and just before latest observation at same time as latest
        ✔ between latest observation and just before latest observation after the latest observation
        ✔ older than oldest reverts
        ✔ oldest observation
        ✔ oldest observation after some time
        ✔ fetch many values
        ✔ gas all of last 20 seconds (51ms)
        ✔ gas latest equal
        ✔ gas latest transform
        ✔ gas oldest
        ✔ gas between oldest and oldest + 1
        ✔ gas middle
      initialized with 5 observations with starting time of 4294967291
        ✔ index, cardinality, cardinality next
        ✔ latest observation same time as latest
        ✔ latest observation 5 seconds after latest
        ✔ current observation 5 seconds after latest
        ✔ between latest observation and just before latest observation at same time as latest
        ✔ between latest observation and just before latest observation after the latest observation
        ✔ older than oldest reverts
        ✔ oldest observation
        ✔ oldest observation after some time
        ✔ fetch many values
        ✔ gas all of last 20 seconds (51ms)
        ✔ gas latest equal
        ✔ gas latest transform
        ✔ gas oldest
        ✔ gas between oldest and oldest + 1
        ✔ gas middle
    full oracle
      - has max cardinality next
      - has max cardinality
      - index wrapped around
      - can observe into the ordered portion with exact seconds ago
      - can observe into the ordered portion with unexact seconds ago
      - can observe at exactly the latest observation
      - can observe at exactly the latest observation after some time passes
      - can observe after the latest observation counterfactual
      - can observe into the unordered portion of array at exact seconds ago of observation
      - can observe into the unordered portion of array at seconds ago between observations
      - can observe the oldest observation 13*65534 seconds ago
      - can observe the oldest observation 13*65534 + 5 seconds ago if time has elapsed
      - gas cost of observe(0)
      - gas cost of observe(200 * 13)
      - gas cost of observe(200 * 13 + 5)
      - gas cost of observe(0) after 5 seconds
      - gas cost of observe(5) after 5 seconds
      - gas cost of observe(oldest)
      - gas cost of observe(oldest) after 5 seconds

  PancakeV3Factory
    ✔ owner is deployer
    ✔ factory bytecode size
0x6ce8eb472fa82df5469c6ab6d485f17c3ad13c8cd7af59b3d4a8026c5ce0f7e2 init code
    ✔ pool bytecode size
    ✔ initial enabled fee amounts
    #createPool
0x6ce8eb472fa82df5469c6ab6d485f17c3ad13c8cd7af59b3d4a8026c5ce0f7e2 init code
      ✔ succeeds for low fee pool (63ms)
0x6ce8eb472fa82df5469c6ab6d485f17c3ad13c8cd7af59b3d4a8026c5ce0f7e2 init code
      ✔ succeeds for medium fee pool (44ms)
0x6ce8eb472fa82df5469c6ab6d485f17c3ad13c8cd7af59b3d4a8026c5ce0f7e2 init code
      ✔ succeeds for high fee pool (47ms)
0x6ce8eb472fa82df5469c6ab6d485f17c3ad13c8cd7af59b3d4a8026c5ce0f7e2 init code
      ✔ succeeds if tokens are passed in reverse (45ms)
      ✔ fails if token a == token b
      ✔ fails if token a is 0 or token b is 0
      ✔ fails if fee amount is not enabled
      ✔ gas
    #setOwner
      ✔ fails if caller is not owner
      ✔ updates owner
      ✔ emits event
      ✔ cannot be called by original owner
    #enableFeeAmount
      ✔ fails if caller is not owner
      ✔ fails if fee is too great
      ✔ fails if tick spacing is too small
      ✔ fails if tick spacing is too large
      ✔ fails if already initialized
      ✔ sets the fee amount in the mapping
      ✔ emits an event
0x6ce8eb472fa82df5469c6ab6d485f17c3ad13c8cd7af59b3d4a8026c5ce0f7e2 init code
      ✔ enables pool creation (53ms)
0x6ce8eb472fa82df5469c6ab6d485f17c3ad13c8cd7af59b3d4a8026c5ce0f7e2 init code
      ✔ fails if enables pool creation without whitelist
0x6ce8eb472fa82df5469c6ab6d485f17c3ad13c8cd7af59b3d4a8026c5ce0f7e2 init code
      ✔ fails if enables pool creation without enable
0x6ce8eb472fa82df5469c6ab6d485f17c3ad13c8cd7af59b3d4a8026c5ce0f7e2 init code
      ✔ enables pool creation with enable and whitelist

  PancakeV3Pool arbitrage tests
    protocol fee = 0;
      passive liquidity of 0.010000
        exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98
          1) "before each" hook: load the fixture for "not sandwiched"
      passive liquidity of 1.0000
        exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98
          2) "before each" hook: load the fixture for "not sandwiched"
      passive liquidity of 10.000
        exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98
          3) "before each" hook: load the fixture for "not sandwiched"
      passive liquidity of 100.00
        exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98
          4) "before each" hook: load the fixture for "not sandwiched"
    protocol fee = 2000;
      passive liquidity of 0.010000
        exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98
          5) "before each" hook: load the fixture for "not sandwiched"
      passive liquidity of 1.0000
        exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98
          6) "before each" hook: load the fixture for "not sandwiched"
      passive liquidity of 10.000
        exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98
          7) "before each" hook: load the fixture for "not sandwiched"
      passive liquidity of 100.00
        exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98
          8) "before each" hook: load the fixture for "not sandwiched"

  PancakeV3Pool gas tests
    fee is off
      #swapExact0For1
        9) "before each" hook: load the fixture for "first swap in block with no tick movement"
    fee is on
      #swapExact0For1
        10) "before each" hook: load the fixture for "first swap in block with no tick movement"

  PancakeV3Pool
    11) "before each" hook: deploy fixture for "constructor initializes immutables"

  PancakeV3Pool swap tests
    low fee, 1:1 price, 2e18 max range liquidity
      12) "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1"
      13) "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1"
    medium fee, 1:1 price, 2e18 max range liquidity
      14) "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1"
      15) "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1"
    high fee, 1:1 price, 2e18 max range liquidity
      16) "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1"
      17) "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1"
    medium fee, 10:1 price, 2e18 max range liquidity
      18) "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1"
      19) "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1"
    medium fee, 1:10 price, 2e18 max range liquidity
      20) "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1"
      21) "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1"
    medium fee, 1:1 price, 0 liquidity, all liquidity around current price
      22) "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1"
      23) "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1"
    medium fee, 1:1 price, additional liquidity around current price
      24) "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1"
      25) "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1"
    low fee, large liquidity around current price (stable swap)
      26) "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1"
      27) "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1"
    medium fee, token0 liquidity only
      28) "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1"
      29) "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1"
    medium fee, token1 liquidity only
      30) "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1"
      31) "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1"
    close to max price
      32) "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1"
      33) "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1"
    close to min price
      34) "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1"
      35) "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1"
    max full range liquidity at 1:1 price with default fee
      36) "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1"
      37) "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1"
    initialized at the max ratio
      38) "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1"
      39) "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1"
    initialized at the min ratio
      40) "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1"
      41) "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1"

  PancakeV3Pool
    42) "before each" hook: deploy first fixture for "constructor initializes immutables"

  SqrtPriceMath
    #getNextSqrtPriceFromInput
      ✔ fails if price is zero
      ✔ fails if liquidity is zero
      ✔ fails if input amount overflows the price
      ✔ any input amount cannot underflow the price
      ✔ returns input price if amount in is zero and zeroForOne = true
      ✔ returns input price if amount in is zero and zeroForOne = false
      ✔ returns the minimum price for max inputs
      ✔ input amount of 0.1 token1
      ✔ input amount of 0.1 token0
      ✔ amountIn > type(uint96).max and zeroForOne = true
      ✔ can return 1 with enough amountIn and zeroForOne = true
      ✔ zeroForOne = true gas
      ✔ zeroForOne = false gas
    #getNextSqrtPriceFromOutput
      ✔ fails if price is zero
      ✔ fails if liquidity is zero
      ✔ fails if output amount is exactly the virtual reserves of token0
      ✔ fails if output amount is greater than virtual reserves of token0
      ✔ fails if output amount is greater than virtual reserves of token1
      ✔ fails if output amount is exactly the virtual reserves of token1
      ✔ succeeds if output amount is just less than the virtual reserves of token1
      ✔ puzzling echidna test
      ✔ returns input price if amount in is zero and zeroForOne = true
      ✔ returns input price if amount in is zero and zeroForOne = false
      ✔ output amount of 0.1 token1
      ✔ output amount of 0.1 token1
      ✔ reverts if amountOut is impossible in zero for one direction
      ✔ reverts if amountOut is impossible in one for zero direction
      ✔ zeroForOne = true gas
      ✔ zeroForOne = false gas
    #getAmount0Delta
      ✔ returns 0 if liquidity is 0
      ✔ returns 0 if prices are equal
      ✔ returns 0.1 amount1 for price of 1 to 1.21
      ✔ works for prices that overflow
      ✔ gas cost for amount0 where roundUp = true
      ✔ gas cost for amount0 where roundUp = true
    #getAmount1Delta
      ✔ returns 0 if liquidity is 0
      ✔ returns 0 if prices are equal
      ✔ returns 0.1 amount1 for price of 1 to 1.21
      ✔ gas cost for amount0 where roundUp = true
      ✔ gas cost for amount0 where roundUp = false
    swap computation
      ✔ sqrtP * sqrtQ overflows

  SwapMath
    #computeSwapStep
      ✔ exact amount in that gets capped at price target in one for zero
      ✔ exact amount out that gets capped at price target in one for zero
      ✔ exact amount in that is fully spent in one for zero
      ✔ exact amount out that is fully received in one for zero
      ✔ amount out is capped at the desired amount out
      ✔ target price of 1 uses partial input amount
      ✔ entire input amount taken as fee
      ✔ handles intermediate insufficient liquidity in zero for one exact output case
      ✔ handles intermediate insufficient liquidity in one for zero exact output case
      gas
        ✔ swap one for zero exact in capped
        ✔ swap zero for one exact in capped
        ✔ swap one for zero exact out capped
        ✔ swap zero for one exact out capped
        ✔ swap one for zero exact in partial
        ✔ swap zero for one exact in partial
        ✔ swap one for zero exact out partial
        ✔ swap zero for one exact out partial

  Tick
    #tickSpacingToMaxLiquidityPerTick
      ✔ returns the correct value for low fee
      ✔ returns the correct value for medium fee
      ✔ returns the correct value for high fee
      ✔ returns the correct value for entire range
      ✔ returns the correct value for 2302
    #getFeeGrowthInside
      ✔ returns all for two uninitialized ticks if tick is inside
      ✔ returns 0 for two uninitialized ticks if tick is above
      ✔ returns 0 for two uninitialized ticks if tick is below
      ✔ subtracts upper tick if below
      ✔ subtracts lower tick if above
      ✔ subtracts upper and lower tick if inside
      ✔ works correctly with overflow on inside tick
    #update
      ✔ flips from zero to nonzero
      ✔ does not flip from nonzero to greater nonzero
      ✔ flips from nonzero to zero
      ✔ does not flip from nonzero to lesser nonzero
      ✔ does not flip from nonzero to lesser nonzero
      ✔ reverts if total liquidity gross is greater than max
      ✔ nets the liquidity based on upper flag
      ✔ reverts on overflow liquidity gross
      ✔ assumes all growth happens below ticks lte current tick
      ✔ does not set any growth fields if tick is already initialized
      ✔ does not set any growth fields for ticks gt current tick
    #clear
      ✔ deletes all the data in the tick
    #cross
      ✔ flips the growth variables
      ✔ two flips are no op

  TickBitmap
    #isInitialized
      ✔ is false at first
      ✔ is flipped by #flipTick
      ✔ is flipped back by #flipTick
      ✔ is not changed by another flip to a different tick
      ✔ is not changed by another flip to a different tick on another word
    #flipTick
      ✔ flips only the specified tick
      ✔ reverts only itself
      ✔ gas cost of flipping first tick in word to initialized
      ✔ gas cost of flipping second tick in word to initialized
      ✔ gas cost of flipping a tick that results in deleting a word
    #nextInitializedTickWithinOneWord
      lte = false
        ✔ returns tick to right if at initialized tick
        ✔ returns tick to right if at initialized tick
        ✔ returns the tick directly to the right
        ✔ returns the tick directly to the right
        ✔ returns the next words initialized tick if on the right boundary
        ✔ returns the next words initialized tick if on the right boundary
        ✔ returns the next initialized tick from the next word
        ✔ does not exceed boundary
        ✔ skips entire word
        ✔ skips half word
        ✔ gas cost on boundary
        ✔ gas cost just below boundary
        ✔ gas cost for entire word
      lte = true
        ✔ returns same tick if initialized
        ✔ returns tick directly to the left of input tick if not initialized
        ✔ will not exceed the word boundary
        ✔ at the word boundary
        ✔ word boundary less 1 (next initialized tick in next word)
        ✔ word boundary
        ✔ entire empty word
        ✔ halfway through empty word
        ✔ boundary is initialized
        ✔ gas cost on boundary
        ✔ gas cost just below boundary
        ✔ gas cost for entire word

  TickMath
    #getSqrtRatioAtTick
      ✔ throws for too low
      ✔ throws for too low
      ✔ min tick
      ✔ min tick +1
      ✔ max tick - 1
      ✔ min tick ratio is less than js implementation
      ✔ max tick ratio is greater than js implementation
      ✔ max tick
      tick -50
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick 50
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick -100
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick 100
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick -250
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick 250
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick -500
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick 500
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick -1000
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick 1000
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick -2500
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick 2500
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick -3000
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick 3000
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick -4000
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick 4000
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick -5000
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick 5000
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick -50000
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick 50000
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick -150000
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick 150000
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick -250000
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick 250000
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick -500000
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick 500000
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick -738203
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
      tick 738203
        ✔ is at most off by 1/100th of a bips
        ✔ result
        ✔ gas
    #MIN_SQRT_RATIO
      ✔ equals #getSqrtRatioAtTick(MIN_TICK)
    #MAX_SQRT_RATIO
      ✔ equals #getSqrtRatioAtTick(MAX_TICK)
    #getTickAtSqrtRatio
      ✔ throws for too low
      ✔ throws for too high
      ✔ ratio of min tick
      ✔ ratio of min tick + 1
      ✔ ratio of max tick - 1
      ✔ ratio closest to max tick
      ratio 4295128739
        ✔ is at most off by 1
        ✔ ratio is between the tick and tick+1
        ✔ result
        ✔ gas
      ratio 79228162514264337593543950336000000
        ✔ is at most off by 1
        ✔ ratio is between the tick and tick+1
        ✔ result
        ✔ gas
      ratio 79228162514264337593543950336000
        ✔ is at most off by 1
        ✔ ratio is between the tick and tick+1
        ✔ result
        ✔ gas
      ratio 9903520314283042199192993792
        ✔ is at most off by 1
        ✔ ratio is between the tick and tick+1
        ✔ result
        ✔ gas
      ratio 28011385487393069959365969113
        ✔ is at most off by 1
        ✔ ratio is between the tick and tick+1
        ✔ result
        ✔ gas
      ratio 56022770974786139918731938227
        ✔ is at most off by 1
        ✔ ratio is between the tick and tick+1
        ✔ result
        ✔ gas
      ratio 79228162514264337593543950336
        ✔ is at most off by 1
        ✔ ratio is between the tick and tick+1
        ✔ result
        ✔ gas
      ratio 112045541949572279837463876454
        ✔ is at most off by 1
        ✔ ratio is between the tick and tick+1
        ✔ result
        ✔ gas
      ratio 224091083899144559674927752909
        ✔ is at most off by 1
        ✔ ratio is between the tick and tick+1
        ✔ result
        ✔ gas
      ratio 633825300114114700748351602688
        ✔ is at most off by 1
        ✔ ratio is between the tick and tick+1
        ✔ result
        ✔ gas
      ratio 79228162514264337593543950
        ✔ is at most off by 1
        ✔ ratio is between the tick and tick+1
        ✔ result
        ✔ gas
      ratio 79228162514264337593543
        ✔ is at most off by 1
        ✔ ratio is between the tick and tick+1
        ✔ result
        ✔ gas
      ratio 1461446703485210103287273052203988822378723970341
        ✔ is at most off by 1
        ✔ ratio is between the tick and tick+1
        ✔ result
        ✔ gas


Snapshot Summary
 › 372 snapshots obsolete from 3 test suites. To remove them all, re-run mocha with `--update` to update them.
   ↳ test/PancakeV3Pool.arbitrage.spec.ts
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 0.010000 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 backrun to true price after swap only 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 0.010000 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 not sandwiched 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 0.010000 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 sandwiched with swap to execution price then mint max liquidity/target/burn max liquidity 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 0.010000 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 backrun to true price after swap only 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 0.010000 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 not sandwiched 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 0.010000 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 sandwiched with swap to execution price then mint max liquidity/target/burn max liquidity 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 1.0000 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 backrun to true price after swap only 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 1.0000 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 not sandwiched 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 1.0000 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 sandwiched with swap to execution price then mint max liquidity/target/burn max liquidity 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 1.0000 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 backrun to true price after swap only 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 1.0000 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 not sandwiched 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 1.0000 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 sandwiched with swap to execution price then mint max liquidity/target/burn max liquidity 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 10.000 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 backrun to true price after swap only 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 10.000 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 not sandwiched 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 10.000 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 sandwiched with swap to execution price then mint max liquidity/target/burn max liquidity 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 10.000 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 backrun to true price after swap only 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 10.000 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 not sandwiched 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 10.000 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 sandwiched with swap to execution price then mint max liquidity/target/burn max liquidity 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 100.00 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 backrun to true price after swap only 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 100.00 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 not sandwiched 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 100.00 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 sandwiched with swap to execution price then mint max liquidity/target/burn max liquidity 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 100.00 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 backrun to true price after swap only 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 100.00 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 not sandwiched 1
       • PancakeV3Pool arbitrage tests protocol fee = 0; passive liquidity of 100.00 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 sandwiched with swap to execution price then mint max liquidity/target/burn max liquidity 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 0.010000 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 backrun to true price after swap only 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 0.010000 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 not sandwiched 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 0.010000 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 sandwiched with swap to execution price then mint max liquidity/target/burn max liquidity 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 0.010000 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 backrun to true price after swap only 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 0.010000 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 not sandwiched 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 0.010000 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 sandwiched with swap to execution price then mint max liquidity/target/burn max liquidity 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 1.0000 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 backrun to true price after swap only 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 1.0000 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 not sandwiched 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 1.0000 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 sandwiched with swap to execution price then mint max liquidity/target/burn max liquidity 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 1.0000 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 backrun to true price after swap only 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 1.0000 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 not sandwiched 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 1.0000 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 sandwiched with swap to execution price then mint max liquidity/target/burn max liquidity 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 10.000 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 backrun to true price after swap only 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 10.000 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 not sandwiched 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 10.000 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 sandwiched with swap to execution price then mint max liquidity/target/burn max liquidity 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 10.000 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 backrun to true price after swap only 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 10.000 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 not sandwiched 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 10.000 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 sandwiched with swap to execution price then mint max liquidity/target/burn max liquidity 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 100.00 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 backrun to true price after swap only 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 100.00 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 not sandwiched 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 100.00 exact input of 10e18 token0 with starting price of 1.0 and true price of 0.98 sandwiched with swap to execution price then mint max liquidity/target/burn max liquidity 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 100.00 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 backrun to true price after swap only 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 100.00 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 not sandwiched 1
       • PancakeV3Pool arbitrage tests protocol fee = 2000; passive liquidity of 100.00 exact input of 10e18 token0 with starting price of 1.0 and true price of 1.01 sandwiched with swap to execution price then mint max liquidity/target/burn max liquidity 1
   ↳ test/PancakeV3Pool.gas.spec.ts
       • PancakeV3Pool gas tests fee is off #burn above current price burn entire position after some time passes 1
       • PancakeV3Pool gas tests fee is off #burn above current price burn when only position using ticks 1
       • PancakeV3Pool gas tests fee is off #burn above current price entire position burn but other positions are using the ticks 1
       • PancakeV3Pool gas tests fee is off #burn above current price partial position burn 1
       • PancakeV3Pool gas tests fee is off #burn around current price burn entire position after some time passes 1
       • PancakeV3Pool gas tests fee is off #burn around current price burn when only position using ticks 1
       • PancakeV3Pool gas tests fee is off #burn around current price entire position burn but other positions are using the ticks 1
       • PancakeV3Pool gas tests fee is off #burn around current price partial position burn 1
       • PancakeV3Pool gas tests fee is off #burn below current price burn entire position after some time passes 1
       • PancakeV3Pool gas tests fee is off #burn below current price burn when only position using ticks 1
       • PancakeV3Pool gas tests fee is off #burn below current price entire position burn but other positions are using the ticks 1
       • PancakeV3Pool gas tests fee is off #burn below current price partial position burn 1
       • PancakeV3Pool gas tests fee is off #collect close to worst case 1
       • PancakeV3Pool gas tests fee is off #increaseObservationCardinalityNext grow by 1 slot 1
       • PancakeV3Pool gas tests fee is off #increaseObservationCardinalityNext no op 1
       • PancakeV3Pool gas tests fee is off #mint above current price add to position after some time passes 1
       • PancakeV3Pool gas tests fee is off #mint above current price add to position existing 1
       • PancakeV3Pool gas tests fee is off #mint above current price new position mint first in range 1
       • PancakeV3Pool gas tests fee is off #mint above current price second position in same range 1
       • PancakeV3Pool gas tests fee is off #mint around current price add to position after some time passes 1
       • PancakeV3Pool gas tests fee is off #mint around current price add to position existing 1
       • PancakeV3Pool gas tests fee is off #mint around current price new position mint first in range 1
       • PancakeV3Pool gas tests fee is off #mint around current price second position in same range 1
       • PancakeV3Pool gas tests fee is off #mint below current price add to position after some time passes 1
       • PancakeV3Pool gas tests fee is off #mint below current price add to position existing 1
       • PancakeV3Pool gas tests fee is off #mint below current price new position mint first in range 1
       • PancakeV3Pool gas tests fee is off #mint below current price second position in same range 1
       • PancakeV3Pool gas tests fee is off #poke best case 1
       • PancakeV3Pool gas tests fee is off #snapshotCumulativesInside tick above 1
       • PancakeV3Pool gas tests fee is off #snapshotCumulativesInside tick below 1
       • PancakeV3Pool gas tests fee is off #snapshotCumulativesInside tick inside 1
       • PancakeV3Pool gas tests fee is off #swapExact0For1 first swap in block moves tick, no initialized crossings 1
       • PancakeV3Pool gas tests fee is off #swapExact0For1 first swap in block with no tick movement 1
       • PancakeV3Pool gas tests fee is off #swapExact0For1 first swap in block, large swap crossing a single initialized tick 1
       • PancakeV3Pool gas tests fee is off #swapExact0For1 first swap in block, large swap crossing several initialized ticks 1
       • PancakeV3Pool gas tests fee is off #swapExact0For1 first swap in block, large swap, no initialized crossings 1
       • PancakeV3Pool gas tests fee is off #swapExact0For1 large swap crossing several initialized ticks after some time passes 1
       • PancakeV3Pool gas tests fee is off #swapExact0For1 large swap crossing several initialized ticks second time after some time passes 1
       • PancakeV3Pool gas tests fee is off #swapExact0For1 second swap in block moves tick, no initialized crossings 1
       • PancakeV3Pool gas tests fee is off #swapExact0For1 second swap in block with no tick movement 1
       • PancakeV3Pool gas tests fee is off #swapExact0For1 second swap in block, large swap crossing a single initialized tick 1
       • PancakeV3Pool gas tests fee is off #swapExact0For1 second swap in block, large swap crossing several initialized ticks 1
       • PancakeV3Pool gas tests fee is on #burn above current price burn entire position after some time passes 1
       • PancakeV3Pool gas tests fee is on #burn above current price burn when only position using ticks 1
       • PancakeV3Pool gas tests fee is on #burn above current price entire position burn but other positions are using the ticks 1
       • PancakeV3Pool gas tests fee is on #burn above current price partial position burn 1
       • PancakeV3Pool gas tests fee is on #burn around current price burn entire position after some time passes 1
       • PancakeV3Pool gas tests fee is on #burn around current price burn when only position using ticks 1
       • PancakeV3Pool gas tests fee is on #burn around current price entire position burn but other positions are using the ticks 1
       • PancakeV3Pool gas tests fee is on #burn around current price partial position burn 1
       • PancakeV3Pool gas tests fee is on #burn below current price burn entire position after some time passes 1
       • PancakeV3Pool gas tests fee is on #burn below current price burn when only position using ticks 1
       • PancakeV3Pool gas tests fee is on #burn below current price entire position burn but other positions are using the ticks 1
       • PancakeV3Pool gas tests fee is on #burn below current price partial position burn 1
       • PancakeV3Pool gas tests fee is on #collect close to worst case 1
       • PancakeV3Pool gas tests fee is on #increaseObservationCardinalityNext grow by 1 slot 1
       • PancakeV3Pool gas tests fee is on #increaseObservationCardinalityNext no op 1
       • PancakeV3Pool gas tests fee is on #mint above current price add to position after some time passes 1
       • PancakeV3Pool gas tests fee is on #mint above current price add to position existing 1
       • PancakeV3Pool gas tests fee is on #mint above current price new position mint first in range 1
       • PancakeV3Pool gas tests fee is on #mint above current price second position in same range 1
       • PancakeV3Pool gas tests fee is on #mint around current price add to position after some time passes 1
       • PancakeV3Pool gas tests fee is on #mint around current price add to position existing 1
       • PancakeV3Pool gas tests fee is on #mint around current price new position mint first in range 1
       • PancakeV3Pool gas tests fee is on #mint around current price second position in same range 1
       • PancakeV3Pool gas tests fee is on #mint below current price add to position after some time passes 1
       • PancakeV3Pool gas tests fee is on #mint below current price add to position existing 1
       • PancakeV3Pool gas tests fee is on #mint below current price new position mint first in range 1
       • PancakeV3Pool gas tests fee is on #mint below current price second position in same range 1
       • PancakeV3Pool gas tests fee is on #poke best case 1
       • PancakeV3Pool gas tests fee is on #snapshotCumulativesInside tick above 1
       • PancakeV3Pool gas tests fee is on #snapshotCumulativesInside tick below 1
       • PancakeV3Pool gas tests fee is on #snapshotCumulativesInside tick inside 1
       • PancakeV3Pool gas tests fee is on #swapExact0For1 first swap in block moves tick, no initialized crossings 1
       • PancakeV3Pool gas tests fee is on #swapExact0For1 first swap in block with no tick movement 1
       • PancakeV3Pool gas tests fee is on #swapExact0For1 first swap in block, large swap crossing a single initialized tick 1
       • PancakeV3Pool gas tests fee is on #swapExact0For1 first swap in block, large swap crossing several initialized ticks 1
       • PancakeV3Pool gas tests fee is on #swapExact0For1 first swap in block, large swap, no initialized crossings 1
       • PancakeV3Pool gas tests fee is on #swapExact0For1 large swap crossing several initialized ticks after some time passes 1
       • PancakeV3Pool gas tests fee is on #swapExact0For1 large swap crossing several initialized ticks second time after some time passes 1
       • PancakeV3Pool gas tests fee is on #swapExact0For1 second swap in block moves tick, no initialized crossings 1
       • PancakeV3Pool gas tests fee is on #swapExact0For1 second swap in block with no tick movement 1
       • PancakeV3Pool gas tests fee is on #swapExact0For1 second swap in block, large swap crossing a single initialized tick 1
       • PancakeV3Pool gas tests fee is on #swapExact0For1 second swap in block, large swap crossing several initialized ticks 1
   ↳ test/PancakeV3Pool.swaps.spec.ts
       • PancakeV3Pool swap tests close to max price swap exactly 0.0000000000000010000 token0 for token1 1
       • PancakeV3Pool swap tests close to max price swap exactly 0.0000000000000010000 token1 for token0 1
       • PancakeV3Pool swap tests close to max price swap exactly 1.0000 token0 for token1 1
       • PancakeV3Pool swap tests close to max price swap exactly 1.0000 token0 for token1 to price 0.50000 1
       • PancakeV3Pool swap tests close to max price swap exactly 1.0000 token1 for token0 1
       • PancakeV3Pool swap tests close to max price swap exactly 1.0000 token1 for token0 to price 2.0000 1
       • PancakeV3Pool swap tests close to max price swap token0 for exactly 0.0000000000000010000 token1 1
       • PancakeV3Pool swap tests close to max price swap token0 for exactly 1.0000 token1 1
       • PancakeV3Pool swap tests close to max price swap token0 for exactly 1.0000 token1 to price 0.50000 1
       • PancakeV3Pool swap tests close to max price swap token0 for token1 to price 0.40000 1
       • PancakeV3Pool swap tests close to max price swap token0 for token1 to price 2.5000 1
       • PancakeV3Pool swap tests close to max price swap token1 for exactly 0.0000000000000010000 token0 1
       • PancakeV3Pool swap tests close to max price swap token1 for exactly 1.0000 token0 1
       • PancakeV3Pool swap tests close to max price swap token1 for exactly 1.0000 token0 to price 2.0000 1
       • PancakeV3Pool swap tests close to max price swap token1 for token0 to price 0.40000 1
       • PancakeV3Pool swap tests close to max price swap token1 for token0 to price 2.5000 1
       • PancakeV3Pool swap tests close to min price swap exactly 0.0000000000000010000 token0 for token1 1
       • PancakeV3Pool swap tests close to min price swap exactly 0.0000000000000010000 token1 for token0 1
       • PancakeV3Pool swap tests close to min price swap exactly 1.0000 token0 for token1 1
       • PancakeV3Pool swap tests close to min price swap exactly 1.0000 token0 for token1 to price 0.50000 1
       • PancakeV3Pool swap tests close to min price swap exactly 1.0000 token1 for token0 1
       • PancakeV3Pool swap tests close to min price swap exactly 1.0000 token1 for token0 to price 2.0000 1
       • PancakeV3Pool swap tests close to min price swap token0 for exactly 0.0000000000000010000 token1 1
       • PancakeV3Pool swap tests close to min price swap token0 for exactly 1.0000 token1 1
       • PancakeV3Pool swap tests close to min price swap token0 for exactly 1.0000 token1 to price 0.50000 1
       • PancakeV3Pool swap tests close to min price swap token0 for token1 to price 0.40000 1
       • PancakeV3Pool swap tests close to min price swap token0 for token1 to price 2.5000 1
       • PancakeV3Pool swap tests close to min price swap token1 for exactly 0.0000000000000010000 token0 1
       • PancakeV3Pool swap tests close to min price swap token1 for exactly 1.0000 token0 1
       • PancakeV3Pool swap tests close to min price swap token1 for exactly 1.0000 token0 to price 2.0000 1
       • PancakeV3Pool swap tests close to min price swap token1 for token0 to price 0.40000 1
       • PancakeV3Pool swap tests close to min price swap token1 for token0 to price 2.5000 1
       • PancakeV3Pool swap tests high fee, 1:1 price, 2e18 max range liquidity swap exactly 0.0000000000000010000 token0 for token1 1
       • PancakeV3Pool swap tests high fee, 1:1 price, 2e18 max range liquidity swap exactly 0.0000000000000010000 token1 for token0 1
       • PancakeV3Pool swap tests high fee, 1:1 price, 2e18 max range liquidity swap exactly 1.0000 token0 for token1 1
       • PancakeV3Pool swap tests high fee, 1:1 price, 2e18 max range liquidity swap exactly 1.0000 token0 for token1 to price 0.50000 1
       • PancakeV3Pool swap tests high fee, 1:1 price, 2e18 max range liquidity swap exactly 1.0000 token1 for token0 1
       • PancakeV3Pool swap tests high fee, 1:1 price, 2e18 max range liquidity swap exactly 1.0000 token1 for token0 to price 2.0000 1
       • PancakeV3Pool swap tests high fee, 1:1 price, 2e18 max range liquidity swap token0 for exactly 0.0000000000000010000 token1 1
       • PancakeV3Pool swap tests high fee, 1:1 price, 2e18 max range liquidity swap token0 for exactly 1.0000 token1 1
       • PancakeV3Pool swap tests high fee, 1:1 price, 2e18 max range liquidity swap token0 for exactly 1.0000 token1 to price 0.50000 1
       • PancakeV3Pool swap tests high fee, 1:1 price, 2e18 max range liquidity swap token0 for token1 to price 0.40000 1
       • PancakeV3Pool swap tests high fee, 1:1 price, 2e18 max range liquidity swap token0 for token1 to price 2.5000 1
       • PancakeV3Pool swap tests high fee, 1:1 price, 2e18 max range liquidity swap token1 for exactly 0.0000000000000010000 token0 1
       • PancakeV3Pool swap tests high fee, 1:1 price, 2e18 max range liquidity swap token1 for exactly 1.0000 token0 1
       • PancakeV3Pool swap tests high fee, 1:1 price, 2e18 max range liquidity swap token1 for exactly 1.0000 token0 to price 2.0000 1
       • PancakeV3Pool swap tests high fee, 1:1 price, 2e18 max range liquidity swap token1 for token0 to price 0.40000 1
       • PancakeV3Pool swap tests high fee, 1:1 price, 2e18 max range liquidity swap token1 for token0 to price 2.5000 1
       • PancakeV3Pool swap tests initialized at the max ratio swap exactly 0.0000000000000010000 token0 for token1 1
       • PancakeV3Pool swap tests initialized at the max ratio swap exactly 0.0000000000000010000 token1 for token0 1
       • PancakeV3Pool swap tests initialized at the max ratio swap exactly 1.0000 token0 for token1 1
       • PancakeV3Pool swap tests initialized at the max ratio swap exactly 1.0000 token0 for token1 to price 0.50000 1
       • PancakeV3Pool swap tests initialized at the max ratio swap exactly 1.0000 token1 for token0 1
       • PancakeV3Pool swap tests initialized at the max ratio swap exactly 1.0000 token1 for token0 to price 2.0000 1
       • PancakeV3Pool swap tests initialized at the max ratio swap token0 for exactly 0.0000000000000010000 token1 1
       • PancakeV3Pool swap tests initialized at the max ratio swap token0 for exactly 1.0000 token1 1
       • PancakeV3Pool swap tests initialized at the max ratio swap token0 for exactly 1.0000 token1 to price 0.50000 1
       • PancakeV3Pool swap tests initialized at the max ratio swap token0 for token1 to price 0.40000 1
       • PancakeV3Pool swap tests initialized at the max ratio swap token0 for token1 to price 2.5000 1
       • PancakeV3Pool swap tests initialized at the max ratio swap token1 for exactly 0.0000000000000010000 token0 1
       • PancakeV3Pool swap tests initialized at the max ratio swap token1 for exactly 1.0000 token0 1
       • PancakeV3Pool swap tests initialized at the max ratio swap token1 for exactly 1.0000 token0 to price 2.0000 1
       • PancakeV3Pool swap tests initialized at the max ratio swap token1 for token0 to price 0.40000 1
       • PancakeV3Pool swap tests initialized at the max ratio swap token1 for token0 to price 2.5000 1
       • PancakeV3Pool swap tests initialized at the min ratio swap exactly 0.0000000000000010000 token0 for token1 1
       • PancakeV3Pool swap tests initialized at the min ratio swap exactly 0.0000000000000010000 token1 for token0 1
       • PancakeV3Pool swap tests initialized at the min ratio swap exactly 1.0000 token0 for token1 1
       • PancakeV3Pool swap tests initialized at the min ratio swap exactly 1.0000 token0 for token1 to price 0.50000 1
       • PancakeV3Pool swap tests initialized at the min ratio swap exactly 1.0000 token1 for token0 1
       • PancakeV3Pool swap tests initialized at the min ratio swap exactly 1.0000 token1 for token0 to price 2.0000 1
       • PancakeV3Pool swap tests initialized at the min ratio swap token0 for exactly 0.0000000000000010000 token1 1
       • PancakeV3Pool swap tests initialized at the min ratio swap token0 for exactly 1.0000 token1 1
       • PancakeV3Pool swap tests initialized at the min ratio swap token0 for exactly 1.0000 token1 to price 0.50000 1
       • PancakeV3Pool swap tests initialized at the min ratio swap token0 for token1 to price 0.40000 1
       • PancakeV3Pool swap tests initialized at the min ratio swap token0 for token1 to price 2.5000 1
       • PancakeV3Pool swap tests initialized at the min ratio swap token1 for exactly 0.0000000000000010000 token0 1
       • PancakeV3Pool swap tests initialized at the min ratio swap token1 for exactly 1.0000 token0 1
       • PancakeV3Pool swap tests initialized at the min ratio swap token1 for exactly 1.0000 token0 to price 2.0000 1
       • PancakeV3Pool swap tests initialized at the min ratio swap token1 for token0 to price 0.40000 1
       • PancakeV3Pool swap tests initialized at the min ratio swap token1 for token0 to price 2.5000 1
       • PancakeV3Pool swap tests low fee, 1:1 price, 2e18 max range liquidity swap exactly 0.0000000000000010000 token0 for token1 1
       • PancakeV3Pool swap tests low fee, 1:1 price, 2e18 max range liquidity swap exactly 0.0000000000000010000 token1 for token0 1
       • PancakeV3Pool swap tests low fee, 1:1 price, 2e18 max range liquidity swap exactly 1.0000 token0 for token1 1
       • PancakeV3Pool swap tests low fee, 1:1 price, 2e18 max range liquidity swap exactly 1.0000 token0 for token1 to price 0.50000 1
       • PancakeV3Pool swap tests low fee, 1:1 price, 2e18 max range liquidity swap exactly 1.0000 token1 for token0 1
       • PancakeV3Pool swap tests low fee, 1:1 price, 2e18 max range liquidity swap exactly 1.0000 token1 for token0 to price 2.0000 1
       • PancakeV3Pool swap tests low fee, 1:1 price, 2e18 max range liquidity swap token0 for exactly 0.0000000000000010000 token1 1
       • PancakeV3Pool swap tests low fee, 1:1 price, 2e18 max range liquidity swap token0 for exactly 1.0000 token1 1
       • PancakeV3Pool swap tests low fee, 1:1 price, 2e18 max range liquidity swap token0 for exactly 1.0000 token1 to price 0.50000 1
       • PancakeV3Pool swap tests low fee, 1:1 price, 2e18 max range liquidity swap token0 for token1 to price 0.40000 1
       • PancakeV3Pool swap tests low fee, 1:1 price, 2e18 max range liquidity swap token0 for token1 to price 2.5000 1
       • PancakeV3Pool swap tests low fee, 1:1 price, 2e18 max range liquidity swap token1 for exactly 0.0000000000000010000 token0 1
       • PancakeV3Pool swap tests low fee, 1:1 price, 2e18 max range liquidity swap token1 for exactly 1.0000 token0 1
       • PancakeV3Pool swap tests low fee, 1:1 price, 2e18 max range liquidity swap token1 for exactly 1.0000 token0 to price 2.0000 1
       • PancakeV3Pool swap tests low fee, 1:1 price, 2e18 max range liquidity swap token1 for token0 to price 0.40000 1
       • PancakeV3Pool swap tests low fee, 1:1 price, 2e18 max range liquidity swap token1 for token0 to price 2.5000 1
       • PancakeV3Pool swap tests low fee, large liquidity around current price (stable swap) swap exactly 0.0000000000000010000 token0 for token1 1
       • PancakeV3Pool swap tests low fee, large liquidity around current price (stable swap) swap exactly 0.0000000000000010000 token1 for token0 1
       • PancakeV3Pool swap tests low fee, large liquidity around current price (stable swap) swap exactly 1.0000 token0 for token1 1
       • PancakeV3Pool swap tests low fee, large liquidity around current price (stable swap) swap exactly 1.0000 token0 for token1 to price 0.50000 1
       • PancakeV3Pool swap tests low fee, large liquidity around current price (stable swap) swap exactly 1.0000 token1 for token0 1
       • PancakeV3Pool swap tests low fee, large liquidity around current price (stable swap) swap exactly 1.0000 token1 for token0 to price 2.0000 1
       • PancakeV3Pool swap tests low fee, large liquidity around current price (stable swap) swap token0 for exactly 0.0000000000000010000 token1 1
       • PancakeV3Pool swap tests low fee, large liquidity around current price (stable swap) swap token0 for exactly 1.0000 token1 1
       • PancakeV3Pool swap tests low fee, large liquidity around current price (stable swap) swap token0 for exactly 1.0000 token1 to price 0.50000 1
       • PancakeV3Pool swap tests low fee, large liquidity around current price (stable swap) swap token0 for token1 to price 0.40000 1
       • PancakeV3Pool swap tests low fee, large liquidity around current price (stable swap) swap token0 for token1 to price 2.5000 1
       • PancakeV3Pool swap tests low fee, large liquidity around current price (stable swap) swap token1 for exactly 0.0000000000000010000 token0 1
       • PancakeV3Pool swap tests low fee, large liquidity around current price (stable swap) swap token1 for exactly 1.0000 token0 1
       • PancakeV3Pool swap tests low fee, large liquidity around current price (stable swap) swap token1 for exactly 1.0000 token0 to price 2.0000 1
       • PancakeV3Pool swap tests low fee, large liquidity around current price (stable swap) swap token1 for token0 to price 0.40000 1
       • PancakeV3Pool swap tests low fee, large liquidity around current price (stable swap) swap token1 for token0 to price 2.5000 1
       • PancakeV3Pool swap tests max full range liquidity at 1:1 price with default fee swap exactly 0.0000000000000010000 token0 for token1 1
       • PancakeV3Pool swap tests max full range liquidity at 1:1 price with default fee swap exactly 0.0000000000000010000 token1 for token0 1
       • PancakeV3Pool swap tests max full range liquidity at 1:1 price with default fee swap exactly 1.0000 token0 for token1 1
       • PancakeV3Pool swap tests max full range liquidity at 1:1 price with default fee swap exactly 1.0000 token0 for token1 to price 0.50000 1
       • PancakeV3Pool swap tests max full range liquidity at 1:1 price with default fee swap exactly 1.0000 token1 for token0 1
       • PancakeV3Pool swap tests max full range liquidity at 1:1 price with default fee swap exactly 1.0000 token1 for token0 to price 2.0000 1
       • PancakeV3Pool swap tests max full range liquidity at 1:1 price with default fee swap token0 for exactly 0.0000000000000010000 token1 1
       • PancakeV3Pool swap tests max full range liquidity at 1:1 price with default fee swap token0 for exactly 1.0000 token1 1
       • PancakeV3Pool swap tests max full range liquidity at 1:1 price with default fee swap token0 for exactly 1.0000 token1 to price 0.50000 1
       • PancakeV3Pool swap tests max full range liquidity at 1:1 price with default fee swap token0 for token1 to price 0.40000 1
       • PancakeV3Pool swap tests max full range liquidity at 1:1 price with default fee swap token0 for token1 to price 2.5000 1
       • PancakeV3Pool swap tests max full range liquidity at 1:1 price with default fee swap token1 for exactly 0.0000000000000010000 token0 1
       • PancakeV3Pool swap tests max full range liquidity at 1:1 price with default fee swap token1 for exactly 1.0000 token0 1
       • PancakeV3Pool swap tests max full range liquidity at 1:1 price with default fee swap token1 for exactly 1.0000 token0 to price 2.0000 1
       • PancakeV3Pool swap tests max full range liquidity at 1:1 price with default fee swap token1 for token0 to price 0.40000 1
       • PancakeV3Pool swap tests max full range liquidity at 1:1 price with default fee swap token1 for token0 to price 2.5000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 0 liquidity, all liquidity around current price swap exactly 0.0000000000000010000 token0 for token1 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 0 liquidity, all liquidity around current price swap exactly 0.0000000000000010000 token1 for token0 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 0 liquidity, all liquidity around current price swap exactly 1.0000 token0 for token1 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 0 liquidity, all liquidity around current price swap exactly 1.0000 token0 for token1 to price 0.50000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 0 liquidity, all liquidity around current price swap exactly 1.0000 token1 for token0 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 0 liquidity, all liquidity around current price swap exactly 1.0000 token1 for token0 to price 2.0000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 0 liquidity, all liquidity around current price swap token0 for exactly 0.0000000000000010000 token1 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 0 liquidity, all liquidity around current price swap token0 for exactly 1.0000 token1 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 0 liquidity, all liquidity around current price swap token0 for exactly 1.0000 token1 to price 0.50000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 0 liquidity, all liquidity around current price swap token0 for token1 to price 0.40000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 0 liquidity, all liquidity around current price swap token0 for token1 to price 2.5000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 0 liquidity, all liquidity around current price swap token1 for exactly 0.0000000000000010000 token0 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 0 liquidity, all liquidity around current price swap token1 for exactly 1.0000 token0 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 0 liquidity, all liquidity around current price swap token1 for exactly 1.0000 token0 to price 2.0000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 0 liquidity, all liquidity around current price swap token1 for token0 to price 0.40000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 0 liquidity, all liquidity around current price swap token1 for token0 to price 2.5000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 2e18 max range liquidity swap exactly 0.0000000000000010000 token0 for token1 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 2e18 max range liquidity swap exactly 0.0000000000000010000 token1 for token0 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 2e18 max range liquidity swap exactly 1.0000 token0 for token1 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 2e18 max range liquidity swap exactly 1.0000 token0 for token1 to price 0.50000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 2e18 max range liquidity swap exactly 1.0000 token1 for token0 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 2e18 max range liquidity swap exactly 1.0000 token1 for token0 to price 2.0000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 2e18 max range liquidity swap token0 for exactly 0.0000000000000010000 token1 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 2e18 max range liquidity swap token0 for exactly 1.0000 token1 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 2e18 max range liquidity swap token0 for exactly 1.0000 token1 to price 0.50000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 2e18 max range liquidity swap token0 for token1 to price 0.40000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 2e18 max range liquidity swap token0 for token1 to price 2.5000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 2e18 max range liquidity swap token1 for exactly 0.0000000000000010000 token0 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 2e18 max range liquidity swap token1 for exactly 1.0000 token0 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 2e18 max range liquidity swap token1 for exactly 1.0000 token0 to price 2.0000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 2e18 max range liquidity swap token1 for token0 to price 0.40000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, 2e18 max range liquidity swap token1 for token0 to price 2.5000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, additional liquidity around current price swap exactly 0.0000000000000010000 token0 for token1 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, additional liquidity around current price swap exactly 0.0000000000000010000 token1 for token0 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, additional liquidity around current price swap exactly 1.0000 token0 for token1 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, additional liquidity around current price swap exactly 1.0000 token0 for token1 to price 0.50000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, additional liquidity around current price swap exactly 1.0000 token1 for token0 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, additional liquidity around current price swap exactly 1.0000 token1 for token0 to price 2.0000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, additional liquidity around current price swap token0 for exactly 0.0000000000000010000 token1 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, additional liquidity around current price swap token0 for exactly 1.0000 token1 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, additional liquidity around current price swap token0 for exactly 1.0000 token1 to price 0.50000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, additional liquidity around current price swap token0 for token1 to price 0.40000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, additional liquidity around current price swap token0 for token1 to price 2.5000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, additional liquidity around current price swap token1 for exactly 0.0000000000000010000 token0 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, additional liquidity around current price swap token1 for exactly 1.0000 token0 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, additional liquidity around current price swap token1 for exactly 1.0000 token0 to price 2.0000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, additional liquidity around current price swap token1 for token0 to price 0.40000 1
       • PancakeV3Pool swap tests medium fee, 1:1 price, additional liquidity around current price swap token1 for token0 to price 2.5000 1
       • PancakeV3Pool swap tests medium fee, 1:10 price, 2e18 max range liquidity swap exactly 0.0000000000000010000 token0 for token1 1
       • PancakeV3Pool swap tests medium fee, 1:10 price, 2e18 max range liquidity swap exactly 0.0000000000000010000 token1 for token0 1
       • PancakeV3Pool swap tests medium fee, 1:10 price, 2e18 max range liquidity swap exactly 1.0000 token0 for token1 1
       • PancakeV3Pool swap tests medium fee, 1:10 price, 2e18 max range liquidity swap exactly 1.0000 token0 for token1 to price 0.50000 1
       • PancakeV3Pool swap tests medium fee, 1:10 price, 2e18 max range liquidity swap exactly 1.0000 token1 for token0 1
       • PancakeV3Pool swap tests medium fee, 1:10 price, 2e18 max range liquidity swap exactly 1.0000 token1 for token0 to price 2.0000 1
       • PancakeV3Pool swap tests medium fee, 1:10 price, 2e18 max range liquidity swap token0 for exactly 0.0000000000000010000 token1 1
       • PancakeV3Pool swap tests medium fee, 1:10 price, 2e18 max range liquidity swap token0 for exactly 1.0000 token1 1
       • PancakeV3Pool swap tests medium fee, 1:10 price, 2e18 max range liquidity swap token0 for exactly 1.0000 token1 to price 0.50000 1
       • PancakeV3Pool swap tests medium fee, 1:10 price, 2e18 max range liquidity swap token0 for token1 to price 0.40000 1
       • PancakeV3Pool swap tests medium fee, 1:10 price, 2e18 max range liquidity swap token0 for token1 to price 2.5000 1
       • PancakeV3Pool swap tests medium fee, 1:10 price, 2e18 max range liquidity swap token1 for exactly 0.0000000000000010000 token0 1
       • PancakeV3Pool swap tests medium fee, 1:10 price, 2e18 max range liquidity swap token1 for exactly 1.0000 token0 1
       • PancakeV3Pool swap tests medium fee, 1:10 price, 2e18 max range liquidity swap token1 for exactly 1.0000 token0 to price 2.0000 1
       • PancakeV3Pool swap tests medium fee, 1:10 price, 2e18 max range liquidity swap token1 for token0 to price 0.40000 1
       • PancakeV3Pool swap tests medium fee, 1:10 price, 2e18 max range liquidity swap token1 for token0 to price 2.5000 1
       • PancakeV3Pool swap tests medium fee, 10:1 price, 2e18 max range liquidity swap exactly 0.0000000000000010000 token0 for token1 1
       • PancakeV3Pool swap tests medium fee, 10:1 price, 2e18 max range liquidity swap exactly 0.0000000000000010000 token1 for token0 1
       • PancakeV3Pool swap tests medium fee, 10:1 price, 2e18 max range liquidity swap exactly 1.0000 token0 for token1 1
       • PancakeV3Pool swap tests medium fee, 10:1 price, 2e18 max range liquidity swap exactly 1.0000 token0 for token1 to price 0.50000 1
       • PancakeV3Pool swap tests medium fee, 10:1 price, 2e18 max range liquidity swap exactly 1.0000 token1 for token0 1
       • PancakeV3Pool swap tests medium fee, 10:1 price, 2e18 max range liquidity swap exactly 1.0000 token1 for token0 to price 2.0000 1
       • PancakeV3Pool swap tests medium fee, 10:1 price, 2e18 max range liquidity swap token0 for exactly 0.0000000000000010000 token1 1
       • PancakeV3Pool swap tests medium fee, 10:1 price, 2e18 max range liquidity swap token0 for exactly 1.0000 token1 1
       • PancakeV3Pool swap tests medium fee, 10:1 price, 2e18 max range liquidity swap token0 for exactly 1.0000 token1 to price 0.50000 1
       • PancakeV3Pool swap tests medium fee, 10:1 price, 2e18 max range liquidity swap token0 for token1 to price 0.40000 1
       • PancakeV3Pool swap tests medium fee, 10:1 price, 2e18 max range liquidity swap token0 for token1 to price 2.5000 1
       • PancakeV3Pool swap tests medium fee, 10:1 price, 2e18 max range liquidity swap token1 for exactly 0.0000000000000010000 token0 1
       • PancakeV3Pool swap tests medium fee, 10:1 price, 2e18 max range liquidity swap token1 for exactly 1.0000 token0 1
       • PancakeV3Pool swap tests medium fee, 10:1 price, 2e18 max range liquidity swap token1 for exactly 1.0000 token0 to price 2.0000 1
       • PancakeV3Pool swap tests medium fee, 10:1 price, 2e18 max range liquidity swap token1 for token0 to price 0.40000 1
       • PancakeV3Pool swap tests medium fee, 10:1 price, 2e18 max range liquidity swap token1 for token0 to price 2.5000 1
       • PancakeV3Pool swap tests medium fee, token0 liquidity only swap exactly 0.0000000000000010000 token0 for token1 1
       • PancakeV3Pool swap tests medium fee, token0 liquidity only swap exactly 0.0000000000000010000 token1 for token0 1
       • PancakeV3Pool swap tests medium fee, token0 liquidity only swap exactly 1.0000 token0 for token1 1
       • PancakeV3Pool swap tests medium fee, token0 liquidity only swap exactly 1.0000 token0 for token1 to price 0.50000 1
       • PancakeV3Pool swap tests medium fee, token0 liquidity only swap exactly 1.0000 token1 for token0 1
       • PancakeV3Pool swap tests medium fee, token0 liquidity only swap exactly 1.0000 token1 for token0 to price 2.0000 1
       • PancakeV3Pool swap tests medium fee, token0 liquidity only swap token0 for exactly 0.0000000000000010000 token1 1
       • PancakeV3Pool swap tests medium fee, token0 liquidity only swap token0 for exactly 1.0000 token1 1
       • PancakeV3Pool swap tests medium fee, token0 liquidity only swap token0 for exactly 1.0000 token1 to price 0.50000 1
       • PancakeV3Pool swap tests medium fee, token0 liquidity only swap token0 for token1 to price 0.40000 1
       • PancakeV3Pool swap tests medium fee, token0 liquidity only swap token0 for token1 to price 2.5000 1
       • PancakeV3Pool swap tests medium fee, token0 liquidity only swap token1 for exactly 0.0000000000000010000 token0 1
       • PancakeV3Pool swap tests medium fee, token0 liquidity only swap token1 for exactly 1.0000 token0 1
       • PancakeV3Pool swap tests medium fee, token0 liquidity only swap token1 for exactly 1.0000 token0 to price 2.0000 1
       • PancakeV3Pool swap tests medium fee, token0 liquidity only swap token1 for token0 to price 0.40000 1
       • PancakeV3Pool swap tests medium fee, token0 liquidity only swap token1 for token0 to price 2.5000 1
       • PancakeV3Pool swap tests medium fee, token1 liquidity only swap exactly 0.0000000000000010000 token0 for token1 1
       • PancakeV3Pool swap tests medium fee, token1 liquidity only swap exactly 0.0000000000000010000 token1 for token0 1
       • PancakeV3Pool swap tests medium fee, token1 liquidity only swap exactly 1.0000 token0 for token1 1
       • PancakeV3Pool swap tests medium fee, token1 liquidity only swap exactly 1.0000 token0 for token1 to price 0.50000 1
       • PancakeV3Pool swap tests medium fee, token1 liquidity only swap exactly 1.0000 token1 for token0 1
       • PancakeV3Pool swap tests medium fee, token1 liquidity only swap exactly 1.0000 token1 for token0 to price 2.0000 1
       • PancakeV3Pool swap tests medium fee, token1 liquidity only swap token0 for exactly 0.0000000000000010000 token1 1
       • PancakeV3Pool swap tests medium fee, token1 liquidity only swap token0 for exactly 1.0000 token1 1
       • PancakeV3Pool swap tests medium fee, token1 liquidity only swap token0 for exactly 1.0000 token1 to price 0.50000 1
       • PancakeV3Pool swap tests medium fee, token1 liquidity only swap token0 for token1 to price 0.40000 1
       • PancakeV3Pool swap tests medium fee, token1 liquidity only swap token0 for token1 to price 2.5000 1
       • PancakeV3Pool swap tests medium fee, token1 liquidity only swap token1 for exactly 0.0000000000000010000 token0 1
       • PancakeV3Pool swap tests medium fee, token1 liquidity only swap token1 for exactly 1.0000 token0 1
       • PancakeV3Pool swap tests medium fee, token1 liquidity only swap token1 for exactly 1.0000 token0 to price 2.0000 1
       • PancakeV3Pool swap tests medium fee, token1 liquidity only swap token1 for token0 to price 0.40000 1
       • PancakeV3Pool swap tests medium fee, token1 liquidity only swap token1 for token0 to price 2.5000 1

  417 passing (14s)
  20 pending
  42 failing

  1) PancakeV3Pool arbitrage tests
       protocol fee = 0;
         passive liquidity of 0.010000
           "before each" hook: load the fixture for "not sandwiched":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  2) PancakeV3Pool arbitrage tests
       protocol fee = 0;
         passive liquidity of 1.0000
           "before each" hook: load the fixture for "not sandwiched":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  3) PancakeV3Pool arbitrage tests
       protocol fee = 0;
         passive liquidity of 10.000
           "before each" hook: load the fixture for "not sandwiched":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  4) PancakeV3Pool arbitrage tests
       protocol fee = 0;
         passive liquidity of 100.00
           "before each" hook: load the fixture for "not sandwiched":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  5) PancakeV3Pool arbitrage tests
       protocol fee = 2000;
         passive liquidity of 0.010000
           "before each" hook: load the fixture for "not sandwiched":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  6) PancakeV3Pool arbitrage tests
       protocol fee = 2000;
         passive liquidity of 1.0000
           "before each" hook: load the fixture for "not sandwiched":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  7) PancakeV3Pool arbitrage tests
       protocol fee = 2000;
         passive liquidity of 10.000
           "before each" hook: load the fixture for "not sandwiched":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  8) PancakeV3Pool arbitrage tests
       protocol fee = 2000;
         passive liquidity of 100.00
           "before each" hook: load the fixture for "not sandwiched":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  9) PancakeV3Pool gas tests
       fee is off
         "before each" hook: load the fixture for "first swap in block with no tick movement":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  10) PancakeV3Pool gas tests
       fee is on
         "before each" hook: load the fixture for "first swap in block with no tick movement":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  11) PancakeV3Pool
       "before each" hook: deploy fixture for "constructor initializes immutables":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  12) PancakeV3Pool swap tests
       low fee, 1:1 price, 2e18 max range liquidity
         "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  13) PancakeV3Pool swap tests
       low fee, 1:1 price, 2e18 max range liquidity
         "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1":
     TypeError: Cannot read properties of undefined (reading 'burn')
      at Context.<anonymous> (test\PancakeV3Pool.swaps.spec.ts:504:22)
      at processImmediate (node:internal/timers:478:21)

  14) PancakeV3Pool swap tests
       medium fee, 1:1 price, 2e18 max range liquidity
         "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  15) PancakeV3Pool swap tests
       medium fee, 1:1 price, 2e18 max range liquidity
         "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1":
     TypeError: Cannot read properties of undefined (reading 'burn')
      at Context.<anonymous> (test\PancakeV3Pool.swaps.spec.ts:504:22)
      at processImmediate (node:internal/timers:478:21)

  16) PancakeV3Pool swap tests
       high fee, 1:1 price, 2e18 max range liquidity
         "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  17) PancakeV3Pool swap tests
       high fee, 1:1 price, 2e18 max range liquidity
         "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1":
     TypeError: Cannot read properties of undefined (reading 'burn')
      at Context.<anonymous> (test\PancakeV3Pool.swaps.spec.ts:504:22)
      at processImmediate (node:internal/timers:478:21)

  18) PancakeV3Pool swap tests
       medium fee, 10:1 price, 2e18 max range liquidity
         "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  19) PancakeV3Pool swap tests
       medium fee, 10:1 price, 2e18 max range liquidity
         "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1":
     TypeError: Cannot read properties of undefined (reading 'burn')
      at Context.<anonymous> (test\PancakeV3Pool.swaps.spec.ts:504:22)
      at processImmediate (node:internal/timers:478:21)

  20) PancakeV3Pool swap tests
       medium fee, 1:10 price, 2e18 max range liquidity
         "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  21) PancakeV3Pool swap tests
       medium fee, 1:10 price, 2e18 max range liquidity
         "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1":
     TypeError: Cannot read properties of undefined (reading 'burn')
      at Context.<anonymous> (test\PancakeV3Pool.swaps.spec.ts:504:22)
      at processImmediate (node:internal/timers:478:21)

  22) PancakeV3Pool swap tests
       medium fee, 1:1 price, 0 liquidity, all liquidity around current price
         "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  23) PancakeV3Pool swap tests
       medium fee, 1:1 price, 0 liquidity, all liquidity around current price
         "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1":
     TypeError: Cannot read properties of undefined (reading 'burn')
      at Context.<anonymous> (test\PancakeV3Pool.swaps.spec.ts:504:22)
      at processImmediate (node:internal/timers:478:21)

  24) PancakeV3Pool swap tests
       medium fee, 1:1 price, additional liquidity around current price
         "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  25) PancakeV3Pool swap tests
       medium fee, 1:1 price, additional liquidity around current price
         "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1":
     TypeError: Cannot read properties of undefined (reading 'burn')
      at Context.<anonymous> (test\PancakeV3Pool.swaps.spec.ts:504:22)
      at processImmediate (node:internal/timers:478:21)

  26) PancakeV3Pool swap tests
       low fee, large liquidity around current price (stable swap)
         "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  27) PancakeV3Pool swap tests
       low fee, large liquidity around current price (stable swap)
         "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1":
     TypeError: Cannot read properties of undefined (reading 'burn')
      at Context.<anonymous> (test\PancakeV3Pool.swaps.spec.ts:504:22)
      at processImmediate (node:internal/timers:478:21)

  28) PancakeV3Pool swap tests
       medium fee, token0 liquidity only
         "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  29) PancakeV3Pool swap tests
       medium fee, token0 liquidity only
         "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1":
     TypeError: Cannot read properties of undefined (reading 'burn')
      at Context.<anonymous> (test\PancakeV3Pool.swaps.spec.ts:504:22)
      at processImmediate (node:internal/timers:478:21)

  30) PancakeV3Pool swap tests
       medium fee, token1 liquidity only
         "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  31) PancakeV3Pool swap tests
       medium fee, token1 liquidity only
         "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1":
     TypeError: Cannot read properties of undefined (reading 'burn')
      at Context.<anonymous> (test\PancakeV3Pool.swaps.spec.ts:504:22)
      at processImmediate (node:internal/timers:478:21)

  32) PancakeV3Pool swap tests
       close to max price
         "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  33) PancakeV3Pool swap tests
       close to max price
         "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1":
     TypeError: Cannot read properties of undefined (reading 'burn')
      at Context.<anonymous> (test\PancakeV3Pool.swaps.spec.ts:504:22)
      at processImmediate (node:internal/timers:478:21)

  34) PancakeV3Pool swap tests
       close to min price
         "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  35) PancakeV3Pool swap tests
       close to min price
         "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1":
     TypeError: Cannot read properties of undefined (reading 'burn')
      at Context.<anonymous> (test\PancakeV3Pool.swaps.spec.ts:504:22)
      at processImmediate (node:internal/timers:478:21)

  36) PancakeV3Pool swap tests
       max full range liquidity at 1:1 price with default fee
         "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  37) PancakeV3Pool swap tests
       max full range liquidity at 1:1 price with default fee
         "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1":
     TypeError: Cannot read properties of undefined (reading 'burn')
      at Context.<anonymous> (test\PancakeV3Pool.swaps.spec.ts:504:22)
      at processImmediate (node:internal/timers:478:21)

  38) PancakeV3Pool swap tests
       initialized at the max ratio
         "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  39) PancakeV3Pool swap tests
       initialized at the max ratio
         "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1":
     TypeError: Cannot read properties of undefined (reading 'burn')
      at Context.<anonymous> (test\PancakeV3Pool.swaps.spec.ts:504:22)
      at processImmediate (node:internal/timers:478:21)

  40) PancakeV3Pool swap tests
       initialized at the min ratio
         "before each" hook: load fixture for "swap exactly 1.0000 token0 for token1":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)

  41) PancakeV3Pool swap tests
       initialized at the min ratio
         "after each" hook: check can burn positions for "swap exactly 1.0000 token0 for token1":
     TypeError: Cannot read properties of undefined (reading 'burn')
      at Context.<anonymous> (test\PancakeV3Pool.swaps.spec.ts:504:22)
      at processImmediate (node:internal/timers:478:21)

  42) PancakeV3Pool
       "before each" hook: deploy first fixture for "constructor initializes immutables":
     Error: too many arguments:  in Contract constructor (count=3, expectedCount=0, code=UNEXPECTED_ARGUMENT, version=contracts/5.7.0)
      at Logger.makeError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:269:28)
      at Logger.throwError (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:281:20)
      at Logger.checkArgumentCount (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\logger\src.ts\index.ts:347:18)
      at ContractFactory.<anonymous> (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\src.ts\index.ts:1237:16)
      at step (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:48:23)
      at Object.next (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:29:53)
      at D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:23:71
      at new Promise (<anonymous>)
      at __awaiter (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:19:12)
      at ContractFactory.deploy (D:\Work\3-Lancing\1-EVM\1-Uniswap3.0-fork\pancake-v3-contracts\node_modules\@ethersproject\contracts\lib\index.js:1138:16)



info Visit https://yarnpkg.com/en/docs/cli/run for documentation about this command.
